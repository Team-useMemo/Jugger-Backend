name: Deploy Spring Backend

on:
  push:
    branches:
      - main

jobs:
  deploy-backend:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest


    steps:
      - name: ✅ Checkout Spring Code
        uses: actions/checkout@v3

      - name: 🔐 application.properties 생성
        run: |
          mkdir -p src/main/resources
          # echo "spring.datasource.url=..." >> src/main/resources/application.properties
          # echo "spring.datasource.url=..." >> src/main/resources/application.properties
          # 필요한 설정을 secrets로부터 채워넣기
          echo "spring.webflux.multipart.enabled=true" >> src/main/resources/application.properties
          echo "spring.data.mongodb.uri=${{ secrets.MONGO_URL }}" >> src/main/resources/application.properties
          echo "spring.cloud.aws.credentials.access-key=${{ secrets.AWS_ACCESS_KEY }}" >> src/main/resources/application.properties
          echo "spring.cloud.aws.credentials.secret-key=${{ secrets.AWS_SECRET_KEY }}" >> src/main/resources/application.properties
          echo "spring.cloud.aws.region.static=${{ secrets.AWS_REGION }}" >> src/main/resources/application.properties
          echo "spring.cloud.aws.s3.bucket=${{ secrets.S3_BUCKET }}" >> src/main/resources/application.properties
          echo "spring.jwt.secret=${{ secrets.JWT_SECRET}}" >> src/main/resources/application.properties
          echo "spring.jwt.refresh-token-duration=${{ secret.JWT_REFRESH}}" >> src/main/resources/application.properties
          echo "spring.jwt.access-token-duration=${{ secret.JWT_ACCESS}}" >> src/main/resources/application.properties
          echo "kakao.client-id=${{ secret.KAKAO_CLIENT_ID}}" >> src/main/resources/application.properties
          echo "kakao.client-secret=${{ secret.KAKAO_SECRET}}" >> src/main/resources/application.properties
          echo "kakao.redirect-uri=${{ secret.KAKAO_REDIRECT_URI}}" >> src/main/resources/application.properties

      - name: ☕ Gradle Build (jar 생성)
        run: ./gradlew build -x test

      - name: 🐳 Docker Hub 로그인
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 📦 Docker 이미지 Build & Push with Git SHA Tag
        run: |
          IMAGE_TAG=${{ github.sha }}
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:${IMAGE_TAG} .
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:${IMAGE_TAG}

      - name: 🚀 EC2에 SSH 접속 후 backend 재배포
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            IMAGE_TAG=${{ github.sha }}
            cd ~/my-app
            sed -i "s|image: .*/backend:.*|image: ${{ secrets.DOCKER_USERNAME }}/backend:${IMAGE_TAG}|" docker-compose.yml
            docker compose pull backend
            docker compose up -d backend
